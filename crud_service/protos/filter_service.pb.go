// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.10
// source: protos/filter_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Latitude   string `protobuf:"bytes,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude  string `protobuf:"bytes,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Channel1   string `protobuf:"bytes,5,opt,name=channel1,proto3" json:"channel1,omitempty"`
	Channel2   string `protobuf:"bytes,6,opt,name=channel2,proto3" json:"channel2,omitempty"`
	Range      int64  `protobuf:"varint,7,opt,name=range,proto3" json:"range,omitempty"`
	Minresults int64  `protobuf:"varint,8,opt,name=minresults,proto3" json:"minresults,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_filter_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filter_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_protos_filter_service_proto_rawDescGZIP(), []int{0}
}

func (x *Filter) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Filter) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Filter) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Filter) GetChannel1() string {
	if x != nil {
		return x.Channel1
	}
	return ""
}

func (x *Filter) GetChannel2() string {
	if x != nil {
		return x.Channel2
	}
	return ""
}

func (x *Filter) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *Filter) GetMinresults() int64 {
	if x != nil {
		return x.Minresults
	}
	return 0
}

type PostID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PostID) Reset() {
	*x = PostID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_filter_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostID) ProtoMessage() {}

func (x *PostID) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filter_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostID.ProtoReflect.Descriptor instead.
func (*PostID) Descriptor() ([]byte, []int) {
	return file_protos_filter_service_proto_rawDescGZIP(), []int{1}
}

func (x *PostID) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PostID) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PostIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postid []*PostID `protobuf:"bytes,1,rep,name=postid,proto3" json:"postid,omitempty"`
}

func (x *PostIDs) Reset() {
	*x = PostIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_filter_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostIDs) ProtoMessage() {}

func (x *PostIDs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filter_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostIDs.ProtoReflect.Descriptor instead.
func (*PostIDs) Descriptor() ([]byte, []int) {
	return file_protos_filter_service_proto_rawDescGZIP(), []int{2}
}

func (x *PostIDs) GetPostid() []*PostID {
	if x != nil {
		return x.Postid
	}
	return nil
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Latitude  string `protobuf:"bytes,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude string `protobuf:"bytes,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Channel1  string `protobuf:"bytes,5,opt,name=channel1,proto3" json:"channel1,omitempty"`
	Channel2  string `protobuf:"bytes,6,opt,name=channel2,proto3" json:"channel2,omitempty"`
	Votes     int64  `protobuf:"varint,7,opt,name=votes,proto3" json:"votes,omitempty"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_filter_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filter_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_protos_filter_service_proto_rawDescGZIP(), []int{3}
}

func (x *Post) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Post) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Post) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Post) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Post) GetChannel1() string {
	if x != nil {
		return x.Channel1
	}
	return ""
}

func (x *Post) GetChannel2() string {
	if x != nil {
		return x.Channel2
	}
	return ""
}

func (x *Post) GetVotes() int64 {
	if x != nil {
		return x.Votes
	}
	return 0
}

type Votes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes int64 `protobuf:"varint,1,opt,name=votes,proto3" json:"votes,omitempty"`
}

func (x *Votes) Reset() {
	*x = Votes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_filter_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Votes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Votes) ProtoMessage() {}

func (x *Votes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filter_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Votes.ProtoReflect.Descriptor instead.
func (*Votes) Descriptor() ([]byte, []int) {
	return file_protos_filter_service_proto_rawDescGZIP(), []int{4}
}

func (x *Votes) GetVotes() int64 {
	if x != nil {
		return x.Votes
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_filter_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filter_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_protos_filter_service_proto_rawDescGZIP(), []int{5}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_protos_filter_service_proto protoreflect.FileDescriptor

var file_protos_filter_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xce, 0x01, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x42, 0x0a,
	0x06, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x38, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x73, 0x12, 0x2d, 0x0a, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x44, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x04,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xbb, 0x03, 0x0a, 0x0d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x1a, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x55, 0x70, 0x56, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x73, 0x4e, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x12, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x16, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x73, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_filter_service_proto_rawDescOnce sync.Once
	file_protos_filter_service_proto_rawDescData = file_protos_filter_service_proto_rawDesc
)

func file_protos_filter_service_proto_rawDescGZIP() []byte {
	file_protos_filter_service_proto_rawDescOnce.Do(func() {
		file_protos_filter_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_filter_service_proto_rawDescData)
	})
	return file_protos_filter_service_proto_rawDescData
}

var file_protos_filter_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protos_filter_service_proto_goTypes = []interface{}{
	(*Filter)(nil),   // 0: filterservice.Filter
	(*PostID)(nil),   // 1: filterservice.PostID
	(*PostIDs)(nil),  // 2: filterservice.PostIDs
	(*Post)(nil),     // 3: filterservice.Post
	(*Votes)(nil),    // 4: filterservice.Votes
	(*Response)(nil), // 5: filterservice.Response
}
var file_protos_filter_service_proto_depIdxs = []int32{
	1, // 0: filterservice.PostIDs.postid:type_name -> filterservice.PostID
	3, // 1: filterservice.FilterService.AddPost:input_type -> filterservice.Post
	3, // 2: filterservice.FilterService.Count:input_type -> filterservice.Post
	3, // 3: filterservice.FilterService.UpdatePost:input_type -> filterservice.Post
	1, // 4: filterservice.FilterService.RemovePost:input_type -> filterservice.PostID
	1, // 5: filterservice.FilterService.UpVotePost:input_type -> filterservice.PostID
	1, // 6: filterservice.FilterService.DownVotePost:input_type -> filterservice.PostID
	0, // 7: filterservice.FilterService.GetHotPostsNearMe:input_type -> filterservice.Filter
	5, // 8: filterservice.FilterService.AddPost:output_type -> filterservice.Response
	5, // 9: filterservice.FilterService.Count:output_type -> filterservice.Response
	3, // 10: filterservice.FilterService.UpdatePost:output_type -> filterservice.Post
	3, // 11: filterservice.FilterService.RemovePost:output_type -> filterservice.Post
	4, // 12: filterservice.FilterService.UpVotePost:output_type -> filterservice.Votes
	4, // 13: filterservice.FilterService.DownVotePost:output_type -> filterservice.Votes
	2, // 14: filterservice.FilterService.GetHotPostsNearMe:output_type -> filterservice.PostIDs
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_protos_filter_service_proto_init() }
func file_protos_filter_service_proto_init() {
	if File_protos_filter_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_filter_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_filter_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_filter_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_filter_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_filter_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Votes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_filter_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_filter_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_filter_service_proto_goTypes,
		DependencyIndexes: file_protos_filter_service_proto_depIdxs,
		MessageInfos:      file_protos_filter_service_proto_msgTypes,
	}.Build()
	File_protos_filter_service_proto = out.File
	file_protos_filter_service_proto_rawDesc = nil
	file_protos_filter_service_proto_goTypes = nil
	file_protos_filter_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FilterServiceClient is the client API for FilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilterServiceClient interface {
	AddPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error)
	Count(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error)
	UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	RemovePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Post, error)
	UpVotePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Votes, error)
	DownVotePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Votes, error)
	GetHotPostsNearMe(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PostIDs, error)
}

type filterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilterServiceClient(cc grpc.ClientConnInterface) FilterServiceClient {
	return &filterServiceClient{cc}
}

func (c *filterServiceClient) AddPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/filterservice.FilterService/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) Count(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/filterservice.FilterService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/filterservice.FilterService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) RemovePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/filterservice.FilterService/RemovePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) UpVotePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Votes, error) {
	out := new(Votes)
	err := c.cc.Invoke(ctx, "/filterservice.FilterService/UpVotePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) DownVotePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*Votes, error) {
	out := new(Votes)
	err := c.cc.Invoke(ctx, "/filterservice.FilterService/DownVotePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) GetHotPostsNearMe(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PostIDs, error) {
	out := new(PostIDs)
	err := c.cc.Invoke(ctx, "/filterservice.FilterService/GetHotPostsNearMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterServiceServer is the server API for FilterService service.
type FilterServiceServer interface {
	AddPost(context.Context, *Post) (*Response, error)
	Count(context.Context, *Post) (*Response, error)
	UpdatePost(context.Context, *Post) (*Post, error)
	RemovePost(context.Context, *PostID) (*Post, error)
	UpVotePost(context.Context, *PostID) (*Votes, error)
	DownVotePost(context.Context, *PostID) (*Votes, error)
	GetHotPostsNearMe(context.Context, *Filter) (*PostIDs, error)
}

// UnimplementedFilterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFilterServiceServer struct {
}

func (*UnimplementedFilterServiceServer) AddPost(context.Context, *Post) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (*UnimplementedFilterServiceServer) Count(context.Context, *Post) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedFilterServiceServer) UpdatePost(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (*UnimplementedFilterServiceServer) RemovePost(context.Context, *PostID) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePost not implemented")
}
func (*UnimplementedFilterServiceServer) UpVotePost(context.Context, *PostID) (*Votes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpVotePost not implemented")
}
func (*UnimplementedFilterServiceServer) DownVotePost(context.Context, *PostID) (*Votes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownVotePost not implemented")
}
func (*UnimplementedFilterServiceServer) GetHotPostsNearMe(context.Context, *Filter) (*PostIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotPostsNearMe not implemented")
}

func RegisterFilterServiceServer(s *grpc.Server, srv FilterServiceServer) {
	s.RegisterService(&_FilterService_serviceDesc, srv)
}

func _FilterService_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filterservice.FilterService/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).AddPost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filterservice.FilterService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).Count(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filterservice.FilterService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).UpdatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_RemovePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).RemovePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filterservice.FilterService/RemovePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).RemovePost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_UpVotePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).UpVotePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filterservice.FilterService/UpVotePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).UpVotePost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_DownVotePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).DownVotePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filterservice.FilterService/DownVotePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).DownVotePost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_GetHotPostsNearMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).GetHotPostsNearMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filterservice.FilterService/GetHotPostsNearMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).GetHotPostsNearMe(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filterservice.FilterService",
	HandlerType: (*FilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPost",
			Handler:    _FilterService_AddPost_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _FilterService_Count_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _FilterService_UpdatePost_Handler,
		},
		{
			MethodName: "RemovePost",
			Handler:    _FilterService_RemovePost_Handler,
		},
		{
			MethodName: "UpVotePost",
			Handler:    _FilterService_UpVotePost_Handler,
		},
		{
			MethodName: "DownVotePost",
			Handler:    _FilterService_DownVotePost_Handler,
		},
		{
			MethodName: "GetHotPostsNearMe",
			Handler:    _FilterService_GetHotPostsNearMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/filter_service.proto",
}

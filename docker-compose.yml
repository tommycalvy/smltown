version: "3.8"
services:
    postgres:
        image: postgres
        restart: unless-stopped
        environment:
            POSTGRES_USER: "ory_user1"
            POSTGRES_PASSWORD: "ory_pass1"
            POSTGRES_DB: "ory_data1"
        logging:
          options:
            max-size: 10m
            max-file: "3"
        ports:
          - '127.0.0.1:5432:5432'
        volumes:
          - ./ory/postgres-data:/var/lib/postgresql/data
          # copy the sql script to create tables
          # - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    kratos-migrate:
        depends_on:
            - postgres
        image: bazel/ory/kratos:amazon_image
        restart: on-failure
        environment:
            DSN: "postgres://ory_user1:ory_pass1@postgres:5432/ory_data1?sslmode=disable&max_conns=20&max_idle_conns=4"
        command:
            migrate -c kratos-production.yml sql -e --yes
    kratos:
        depends_on:
            - kratos-migrate
        image: bazel/ory/kratos:amazon_image
        restart: unless-stopped
        environment:
            DSN: "postgres://ory_user1:ory_pass1@postgres:5432/ory_data1?sslmode=disable&max_conns=20&max_idle_conns=4"
            SERVE_PUBLIC_URL: "http://localhost:4433"
            SERVE_PUBLIC_HOST: "0.0.0.0"
            SERVE_ADMIN_URL: "http://localhost:4434"
            SERVE_PUBLIC_ADMIN: "0.0.0.0"
        command: serve -c kratos-production.yml --dev --watch-courier
        ports:
            - 127.0.0.1:4433:4433
            - 127.0.0.1:4434:4434
    kratos-import:
        depends_on:
            - kratos
        image: bazel/ory/kratos:amazon_image
        restart: "no"
        environment:
            DSN: "postgres://ory_user1:ory_pass1@postgres:5432/ory_data1?sslmode=disable&max_conns=20&max_idle_conns=4"
        entrypoint: ["/bin/sh","-c"]
        command: 
            - |
              sleep 30
              kratos import identities admin.json --endpoint http://kratos:4434
    filter_service:
        restart: unless-stopped
        image: "bazel/filter_service:amazon_image"
        container_name: filter_service
        environment:
            SERVER_PORT: 50051
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            AWS_TABLE_NAME: "SMLTOWN"
            AWS_REGION: "us-east-1"
        ports:
            - "127.0.0.1:50051:50051"
    crud_service:
        restart: unless-stopped
        image: "bazel/crud_service:amazon_image"
        container_name: crud_service
        environment:
            FILTER_SERVICE_ENDPOINT: "filter_service:50051"
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            AWS_TABLE_NAME: "SMLTOWN"
            AWS_REGION: "us-east-1"
        ports:
            - "127.0.0.1:5656:5656"
    sveltekit:
        restart: unless-stopped
        image: "sveltekit-docker:latest"
        container_name: sveltekit_service
        environment:
            KRATOS_PUBLIC_URL: "http://kratos:4433"
            KRATOS_ADMIN_URL: "http://kratos:4434"
            CRUD_SERVICE_URL: "http://crud_service:5656"
            ORIGIN: "http://localhost:3000"
            ENVIRONMENT: "development"
        ports:
            - "127.0.0.1:3000:3000"

    
